# Generated by Django 4.1.5 on 2025-04-09 10:01

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AugmentedDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dataset_name", models.CharField(max_length=64)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "data_augmentation",
                    models.CharField(
                        blank=True,
                        choices=[("smote", "SMOTE"), ("timegan", "TimeGAN")],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("k_neighbors", models.IntegerField(blank=True, null=True)),
                ("batch_size", models.IntegerField(blank=True, null=True)),
                ("iteration", models.IntegerField(blank=True, null=True)),
                ("num_layers", models.IntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        max_length=32,
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("report_datetime", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="BugFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    models.FileField(blank=True, null=True, upload_to="bugreport/"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dataset_name", models.CharField(max_length=64)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "missing_value",
                    models.CharField(
                        choices=[
                            ("mean", "Mean Imputation"),
                            ("remove", "Remove Missing Samples"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "normalization",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("zscore", "Z-Score"),
                            ("minmax", "Min-Max"),
                            ("none", "No Normalization"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        max_length=32,
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("report_datetime", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    models.FileField(blank=True, null=True, upload_to="datasets/"),
                ),
                ("name", models.CharField(blank=True, max_length=64, null=True)),
                ("volume", models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="FNDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dataset_name", models.CharField(max_length=64)),
                ("description", models.TextField(blank=True, null=True)),
                ("max_neighbor", models.IntegerField(blank=True, null=True)),
                (
                    "pearson",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-1.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        max_length=32,
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("report_datetime", models.DateTimeField(auto_now=True)),
                (
                    "aug_dataset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="solarflare.augmenteddataset",
                    ),
                ),
                (
                    "mvts_dataset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="solarflare.dataset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[("update", "Update"), ("issue", "Issue")],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=64, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "urgent",
                    models.IntegerField(
                        blank=True, choices=[(1, "Yes"), (0, "No")], null=True
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProjectInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task",
                    models.CharField(
                        choices=[
                            ("supervised", "Supervised"),
                            ("unsupervised", "Unsupervised"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "learning_type",
                    models.CharField(
                        choices=[
                            ("classification", "Classification"),
                            ("regression", "Regression"),
                            ("clustering", "Clustering"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "ml_model",
                    models.CharField(
                        choices=[
                            ("gru", "GRU"),
                            ("node2vec", "Node2Vec"),
                            ("svm", "SVM"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "train_split",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(90),
                        ],
                    ),
                ),
                (
                    "num_layers",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "dropout_rate",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "batch_size",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "hidden_size",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "learning_rate",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "optimization",
                    models.CharField(
                        blank=True,
                        choices=[("adam", "Adam"), ("sgd", "SGD")],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "epochs",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "kernel",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("linear", "Linear"),
                            ("rbf", "RBF"),
                            ("poly", "Polynomial"),
                            ("sigmoid", "Sigmoid"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "regularization_strength",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "dimensions",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "walk_length",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "num_walks",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "window_size",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "batch_word",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "penalty",
                    models.CharField(
                        blank=True,
                        choices=[("l2", "L2"), ("l1", "L1"), ("none", "None")],
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "solver",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("lbfgs", "L-BFGS"),
                            ("liblinear", "LibLinear"),
                            ("sag", "SAG"),
                            ("saga", "SAGA"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "max_iter",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ResultFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.FileField(blank=True, null=True, upload_to="results/")),
                ("name", models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("project_name", models.CharField(max_length=64)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        max_length=32,
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("report_datetime", models.DateTimeField(auto_now=True)),
                (
                    "data_aug_info",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="solarflare.augmenteddataset",
                    ),
                ),
                (
                    "data_info",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="solarflare.dataset",
                    ),
                ),
                (
                    "fn_data_info",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="solarflare.fndataset",
                    ),
                ),
                (
                    "project_info",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="solarflare.projectinfo",
                    ),
                ),
                (
                    "result_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="solarflare.resultfile",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="fndataset",
            name="result_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="solarflare.resultfile",
            ),
        ),
        migrations.AddField(
            model_name="fndataset",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="fndataset",
            name="x_train",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="fn_x_train_file",
                to="solarflare.file",
            ),
        ),
        migrations.AddField(
            model_name="fndataset",
            name="y_train",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="fn_y_train_file",
                to="solarflare.file",
            ),
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=64, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="dataset",
            name="result_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="solarflare.resultfile",
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="x_train",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="x_train_file",
                to="solarflare.file",
            ),
        ),
        migrations.AddField(
            model_name="dataset",
            name="y_train",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="y_train_file",
                to="solarflare.file",
            ),
        ),
        migrations.CreateModel(
            name="BugReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ui", "User Interface"),
                            ("server", "Server"),
                            ("security", "Security"),
                            ("programing", "Programing"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=64, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "urgent",
                    models.IntegerField(
                        blank=True, choices=[(1, "Yes"), (0, "No")], null=True
                    ),
                ),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "data",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="solarflare.bugfile",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="augmenteddataset",
            name="dataset",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="solarflare.dataset",
            ),
        ),
        migrations.AddField(
            model_name="augmenteddataset",
            name="result_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="solarflare.resultfile",
            ),
        ),
        migrations.AddField(
            model_name="augmenteddataset",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="augmenteddataset",
            name="x_train",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="aug_x_train_file",
                to="solarflare.file",
            ),
        ),
        migrations.AddField(
            model_name="augmenteddataset",
            name="y_train",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="aug_y_train_file",
                to="solarflare.file",
            ),
        ),
        migrations.CreateModel(
            name="UserInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("personal", "Personal"),
                            ("organization", "Organization"),
                            ("school", "School"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=64, null=True)),
                ("email", models.EmailField(max_length=64)),
                ("phone", models.CharField(blank=True, max_length=16, null=True)),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("unitedstates", "United States"),
                            ("canada", "Canada"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "access",
                    models.IntegerField(
                        blank=True, choices=[(1, "Yes"), (0, "No")], null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "email")},
                "index_together": {("user", "email")},
            },
        ),
    ]
